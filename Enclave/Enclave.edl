/*
 * Copyright (C) 2011-2018 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    
    include "user_types.h" /* buffer_t */

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */


    trusted {
       /* define ECALLs here. */
        public void ecall_init();
        public void ecall_add([in,string]char* id_data,[in,string]char* valuesPointer);
        public void ecall_del([in,string]char* id_str);
        public void ecall_search([in,string]char* id_str);

        public uint32_t get_sealed_data_size([in, string]const char *encrypt_data);
        public sgx_status_t seal_data([out, size=data_size] uint8_t* sealed_blob, uint32_t data_size, [in, string]const char *encrypt_data);

        public uint32_t get_sealed_state_size();
        public sgx_status_t get_sealed_state([out,size=size]uint8_t* out,uint32_t size);
        public sgx_status_t ecall_unseal_state([in,size=data_size]const uint8_t *sealed_blob, size_t data_size);
        public sgx_status_t unseal_data([in,size=data_size]const uint8_t *sealed_blob, size_t data_size, [out,size=data_size]char *out);

        public void free_all();
    };

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);
        void ocall_add([in,size=size,count=count]void* u_arr,[in,size=size,count=count] void* v_arr,size_t count,size_t size);
        void ocall_search([in,size=size,count=count]void* w_u_arr,[in,size=size,count=count] void* w_id_arr, size_t count, size_t size);    
    };

};
